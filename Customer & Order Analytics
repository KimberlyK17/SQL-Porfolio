#In this SQL, I'm querying a database with multiple tables in it to quantify statistics about customer and order data. 

--#1. How many orders were placed in January?--

SELECT COUNT(orderID) 
FROM BIT_DB.JanSales
WHERE length(orderID) = 6
AND orderID <> 'Order ID';

--#2. How many of those orders were for an iPhone?--
SELECT COUNT(orderID)
FROM BIT_DB.JanSales
WHERE Product = "iPhone"
AND length(orderID) = 6
AND orderID <> 'Order ID';

--#3. Select the customer account numbers for all the orders that were placed in February.--
SELECT DISTINCT acctnum
FROM BIT_DB.customers cust
INNER JOIN BIT_DB.FebSales Feb
ON cust.order_id = Feb.orderID
WHERE length(orderID) = 6
AND orderID <> 'Order ID';

--#4. Which product was the cheapest one sold in January, and what was the price?--

SELECT DISTINCT Product, MIN(price) 
FROM BIT_DB.JanSales
GROUP BY product, price
ORDER BY price ASC LIMIT 1;

--#5. What is the total revenue for each product sold in January?(Revenue can be calculated using the number of products sold and the price of the products).--

SELECT product, SUM(Quantity)*price as Revenue
FROM BIT_DB.JanSales
WHERE length(orderID) = 6
AND orderID <> 'Order ID'
GROUP BY Product;

--#6. Which products were sold in February at 548 Lincoln St, Seattle, WA 98101, how many of each were sold, and what was the total revenue?--

SELECT SUM(Quantity), Product, SUM(Quantity)*price AS Revenue
FROM BIT_DB.FebSales
WHERE location = '548 Lincoln St, Seattle, WA 98101'
GROUP BY Product;

--#7. How many customers ordered more than 2 products at a time in February, and what was the average amount spent for those customers?--

SELECT COUNT(distinct cust.acctnum), 
AVG(quantity*price)
FROM BIT_DB.FebSales Feb
LEFT JOIN BIT_DB.Customers cust
ON cust.order_id = Feb.orderID
WHERE Feb.Quantity >2
AND length(orderid) = 6
AND orderid <> 'Order ID';

--LIST all the products sold in Los Angeles in February, and include how many of each were sold.--

SELECT Product, SUM(Quantity)
FROM BIT_DB.FebSales
WHERE location LIKE '%Los Angeles%'
GROUP BY Product;

--1.Which locations in New York received at least 3 orders in January, and how many orders did they each receive?--

SELECT distinct location, COUNT(orderID)
FROM BIT_DB.JanSales
WHERE location LIKE '%NY%'
AND LENGTH(orderID) = 6
AND orderid <> 'Order ID'
GROUP BY location
HAVING count(orderID)>2;

--#2. How many of each type of headphone were sold in February?--

SELECT Product, SUM(Quantity) as Quantity
FROM BIT_DB.FebSales
WHERE Product LIKE '%Headphones%'
GROUP BY Product;

--#3. What was the average amount spent per account in February? --

SELECT AVG(Feb.price*Feb.Quantity)
FROM BIT_DB.FebSales Feb
LEFT JOIN BIT_DB.customers cust
ON Feb.orderID = cust.order_id
WHERE length(orderid)=6
AND orderid <> 'Order ID';

--#4. What was the average quantity of products purchased per account in February?--

SELECT SUM(Quantity)/COUNT(cust.acctnum)
FROM BIT_DB.FebSales Feb
LEFT JOIN BIT_DB.customers cust
ON Feb.orderID = cust.order_id
WHERE length(orderid)=6
AND orderid <> 'Order ID';

--#5. Which product brought in the most revenue in January and how much revenue did it bring in total?--

SELECT Product, SUM(quantity*price) as Revenue
FROM BIT_DB.JanSales
GROUP BY Product
ORDER BY SUM(quantity*price)desc
LIMIT 1;

//--For this project, I downloaded Spotify data from Kaggle.
--Then I created a table to insert Spotify data into.
--Finally, I performed analytics on the data using SQL.--//

--Creating the table:--
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL );

--Then I inserted the Spotify Data .csv into the table.--

--Next, I explored the data using the following SQL.--

--First I determined the avg popularity, danceability, and energy by artist and track.--

SELECT artist_name, track_name, AVG(popularity), AVG(danceability), AVG(energy)
FROM BIT_DB.Spotifydata
GROUP BY artist_name, track_name; 

--Then I determined who the Top 10 artists are by popularity--

SELECT artist_name, track_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity DESC
LIMIT 10;

--Next, I determined what artist released the longest song.--

SELECT artist_name, track_name, duration_ms
FROM BIT_DB.Spotifydata
Order BY duration_ms
LIMIT 1;

--Then I found the average danceability for the 10 most popular songs.--

SELECT artist_name, track_name, popularity, AVG(danceability)
FROM BIT_DB.Spotifydata
GROUP BY track_name
ORDER BY popularity DESC, AVG(danceability) DESC
LIMIT 10;

--Then I wanted to break the energy in categories to track--


--After that, I wanted to see what category of energy the Top 10 songs aligned--

